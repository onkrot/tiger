use digest::Digest;
use tiger_hash::TigerHash;

#[test]
fn two_blocks2() {
    let res = TigerHash::digest(b"Tiger - A Fast New Hash Function, by Ross Anderson and Eli Biham, proceedings of Fast Software Encryption 3, Cambridge, 1996.");
    assert_eq!(
        [
            0x63, 0x1a, 0xbd, 0xd1, 0x3, 0xeb, 0x9a, 0x3d, 0x24, 0x5b, 0x6d, 0xfd, 0x4d, 0x77,
            0xb2, 0x57, 0xfc, 0x74, 0x39, 0x50, 0x1d, 0x15, 0x68, 0xdd,
        ],
        res.as_slice()
    );
}

#[test]
fn two_blocks() {
    let res = TigerHash::digest(b"Tiger - A Fast New Hash Function, by Ross Anderson and Eli Biham, proceedings of Fast Software Encryption 3, Cambridge.");
    assert_eq!(
        [
            0xce, 0x55, 0xa6, 0xaf, 0xd5, 0x91, 0xf5, 0xeb, 0xac, 0x54, 0x7f, 0xf8, 0x4f, 0x89,
            0x22, 0x7f, 0x93, 0x31, 0xda, 0xb0, 0xb6, 0x11, 0xc8, 0x89,
        ],
        res.as_slice()
    );
}

#[test]
fn str_1024() {
    let res = TigerHash::digest(b"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-");
    assert_eq!(
        [
            0xc5, 0x40, 0x34, 0xe5, 0xb4, 0x3e, 0xb8, 0x0, 0x58, 0x48, 0xa7, 0xe0, 0xae, 0x6a,
            0xac, 0x76, 0xe4, 0xff, 0x59, 0xa, 0xe7, 0x15, 0xfd, 0x25,
        ],
        res.as_slice()
    );
}

#[test]
fn abc() {
    let res = TigerHash::digest(b"abc");
    assert_eq!(
        [
            0x2a, 0xab, 0x14, 0x84, 0xe8, 0xc1, 0x58, 0xf2, 0xbf, 0xb8, 0xc5, 0xff, 0x41, 0xb5,
            0x7a, 0x52, 0x51, 0x29, 0x13, 0x1c, 0x95, 0x7b, 0x5f, 0x93,
        ],
        res.as_slice()
    );
}

#[test]
fn empty() {
    let res = TigerHash::digest(b"");
    assert_eq!(
        [
            0x32, 0x93, 0xac, 0x63, 0xc, 0x13, 0xf0, 0x24, 0x5f, 0x92, 0xbb, 0xb1, 0x76, 0x6e,
            0x16, 0x16, 0x7a, 0x4e, 0x58, 0x49, 0x2d, 0xde, 0x73, 0xf3,
        ],
        res.as_slice()
    );
}

#[test]
fn tiger_str() {
    let res = TigerHash::digest(b"Tiger");
    assert_eq!(
        [
            0xdd, 0x0, 0x23, 0x7, 0x99, 0xf5, 0x0, 0x9f, 0xec, 0x6d, 0xeb, 0xc8, 0x38, 0xbb, 0x6a,
            0x27, 0xdf, 0x2b, 0x9d, 0x6f, 0x11, 0xc, 0x79, 0x37,
        ],
        res.as_slice()
    );
}

#[test]
fn one_block() {
    let res =
        TigerHash::digest(b"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-");
    assert_eq!(
        [
            0xf7, 0x1c, 0x85, 0x83, 0x90, 0x2a, 0xfb, 0x87, 0x9e, 0xdf, 0xe6, 0x10, 0xf8, 0x2c,
            0xd, 0x47, 0x86, 0xa3, 0xa5, 0x34, 0x50, 0x44, 0x86, 0xb5,
        ],
        res.as_slice()
    );
}

#[test]
fn one_block2() {
    let res =
        TigerHash::digest(b"ABCDEFGHIJKLMNOPQRSTUVWXYZ=abcdefghijklmnopqrstuvwxyz+0123456789");
    assert_eq!(
        [
            0x48, 0xce, 0xeb, 0x63, 0x8, 0xb8, 0x7d, 0x46, 0xe9, 0x5d, 0x65, 0x61, 0x12, 0xcd,
            0xf1, 0x8d, 0x97, 0x91, 0x5f, 0x97, 0x65, 0x65, 0x89, 0x57,
        ],
        res.as_slice()
    );
}

#[test]
fn one_block_tiger() {
    let res =
        TigerHash::digest(b"Tiger - A Fast New Hash Function, by Ross Anderson and Eli Biham");
    assert_eq!(
        [
            0x8a, 0x86, 0x68, 0x29, 0x4, 0xa, 0x41, 0xc, 0x72, 0x9a, 0xd2, 0x3f, 0x5a, 0xda, 0x71,
            0x16, 0x3, 0xb3, 0xcd, 0xd3, 0x57, 0xe4, 0xc1, 0x5e,
        ],
        res.as_slice()
    );
}

#[test]
fn str_64k() {
    let mut data: Vec<u8> = Vec::new();
    for i in 0..65536 {
        data.push((i & 0xFF) as u8)
    }
    let mut state = TigerHash::new();
    state.input(&data);
    let res = state.result();
    assert_eq!(
        [
            0xfd, 0xf4, 0xf5, 0xb3, 0x51, 0x39, 0xf4, 0x8e, 0x71, 0xe, 0x42, 0x1b, 0xe5, 0xaf,
            0x41, 0x1d, 0xe1, 0xa8, 0xaa, 0xc3, 0x33, 0xf2, 0x62, 0x4,
        ],
        res.as_slice()
    );
}

#[test]
fn str_64k_digest() {
    let mut data: Vec<u8> = Vec::new();
    for i in 0..65536 {
        data.push((i & 0xFF) as u8)
    }
    let res = TigerHash::digest(&data);
    assert_eq!(
        [
            0xfd, 0xf4, 0xf5, 0xb3, 0x51, 0x39, 0xf4, 0x8e, 0x71, 0xe, 0x42, 0x1b, 0xe5, 0xaf,
            0x41, 0x1d, 0xe1, 0xa8, 0xaa, 0xc3, 0x33, 0xf2, 0x62, 0x4,
        ],
        res.as_slice()
    );
}
